# Build Pipeline for SQL Database

# De *trigger* geeft aan waardoor deze pipeline automatisch uitgevoerd wordt. In dit geval: een *commit* tegen *master*
trigger:
- master

stages:

# Build
- stage: BuildStage

  jobs:
  - job: BuildJob

    # De *pool* geeft aan van wat voor VM-image gebruik gemaakt moet worden om deze pipeline uit te kunnen voeren. In dit geval dus een image met Visual Studio 2017
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
      demands:
      - msbuild
      - visualstudio

    variables:
    - name: BuildConfiguration
      value: Release

    # Hier volgende daadwerkelijke "build-stappen". In dit geval hebben we een "eenvoudige" build pipeline - later zullen we kijken naar pipelines met meerdere "stages".
    steps:

    # Build solution
    - task: VSBuild@1
      inputs:
        solution: 'src/sqldatabase/**/*.sln'
        configuration: '$(BuildConfiguration)'

    # Verzamelen van objecten in de build-artifact door ze te kopiëren naar één map 
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**/bin/$(BuildConfiguration)/**/*.dacpac'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    # Publiceren van de artifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'SQLDW'
        publishLocation: 'pipeline'

# Release
- stage: DeployToDevStage
  jobs:
  - job:

    pool:
      name: Azure Pipelines
      vmImage: windows-latest
      demands:
      - msbuild
      - visualstudio

    variables:
      ServerName: 'ci4bisqldbserver-meof.database.windows.net'
      DatabaseName: 'ci4bisqldbdw-meof'
      SqlUsername: 'student'
      SqlPassword: 'SigmaDataLearning.nl'

    steps:
    
    #Download artifact
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'SQLDW'
        targetPath: '$(Pipeline.Workspace)'
    
    #Publish artifact
    - task: SqlAzureDacpacDeployment@1
      inputs:
        azureSubscription: 'bi-azure'
        AuthenticationType: 'server'
        ServerName: '$(ServerName)'
        DatabaseName: '$(DatabaseName)'
        SqlUsername: '$(SqlUsername)'
        SqlPassword: '$(SqlPassword)'
        deployType: 'DacpacTask'
        DeploymentAction: 'Publish'
        DacpacFile: '$(Pipeline.Workspace)/AdventureWorksDW.dacpac'
        IpDetectionMethod: 'AutoDetect'